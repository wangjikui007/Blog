<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Treap学习笔记]]></title>
    <url>%2FTreap%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[1. 二叉排序树二叉排序树（Binary Search Tree，BST）就是中序遍历为正序的树。 BST的用法就是实现一个集合，支持insert，erase以及find（或count）操作。 其中查找珂以使用递归执行。假设要查找的元素为$x$，如果$x$比根节点小，则递归左子树，否则递归右子树。如果根节点与$x$相等，直接返回true即可，以此类推。 插入过程类似，只是如果二叉搜索树里已经有这个元素，插入失败（集合内不能有相同元素）。 可是同样的节点集合，可以构造出很多不同的BST，导致最坏时一棵二叉排序树可能会变成一条链！这个时间复杂度是不能接受的。 那如何维持BST的平衡？ 旋转！ 旋转操作如图： （自己画的，勿喷） 可是，该什么时候旋转呢？ 这就是Treap的作用啦！ 2.用Treap实现STL中的setTreap就是一棵拥有键值、优先级两种权值的树。用键值来看，这棵树是BST；用优先级来看，这棵树是堆。 每个节点的优先级都是随机定义的以维护平衡。维护平衡的方式就是上面讲的旋转。 总觉得代码里出现随机数很爽有木有 Treap节点的定义如下： 12345678910struct Node&#123; Node* ch[2]; //左右子树 int r; //优先级 int v; //键值 Node(int v):v(v)&#123;ch[0]=ch[1]=NULL;r=rand();&#125; int cmp(int x)const&#123; if(x==v)return -1; return x&lt;v?0:1; &#125;&#125;; 下面是旋转的代码： 1234//d=0表示左旋，d=1表示右旋void rotate(Node* &amp;o,int d)&#123; Node* k=o-&gt;ch[d^1];o-&gt;ch[d^1]=k-&gt;ch[d];k-&gt;ch[d]=o;o=k;&#125; 由于d等于0或1，d^1在d=0时就是1，d=1时就是0，因为速度快就这样写了。 旋转可以形象地理解为把一个节点提起来，然后它的左（或右）子树就会掉下来。 下面是插入，与BST类似，唯一的不同就是旋转维持平衡。 12345678//在以o为根的子树里插入键值xvoid insert(Node* &amp;o,int x)&#123; if(o==NULL)o=new Node(x); else&#123; int d=o-&gt;cmp(x); insert(o-&gt;ch[d],x);if(o-&gt;ch[d]-&gt;r&gt;o-&gt;r)rotate(o,d^1); &#125;&#125; 未完待续…Treap还没有写删除和查找qwq]]></content>
      <categories>
        <category>OI笔记</category>
        <category>自学</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP2018普及组初赛参赛感想]]></title>
    <url>%2FNOIP2018chusai%2F</url>
    <content type="text"><![CDATA[emm…昨天（10.13）参加了NOIp2018普及の初赛qwq 估分大概$80\sim 90$吧。 今年初赛还是有一定难度的。 10.16upd：实际得分78分，BJ第42名。个人认为是考得不错的，毕竟我是临时抱佛脚qwq。 10.19upd：进复赛分数线45，呵呵…我们班有一个巨佬考砸了，只考了49，不过也进了（压线qwq） 题目（至于为什么是辽宁，我也不知道，反正都一样）： （用手机看的童鞋们：pdf预览手机下有问题，所以无法查看(safari浏览器是这样的，我不知道其他是不是)） 附答案： 不出意外的话应该能过。 第三大题第四大题应该都可以AK。 就是第一第二大题错得比较惨qwq 还考了很多历年真题。 比如从前有座山，山里有座庙那道题。 有一道题我居然蒙对了（qwq？） 复赛见吧 10.6upd：呵呵，这句话说对了↑本年目标：NOIp普及组300+！1while(1)noip2018.rp++;]]></content>
      <categories>
        <category>参赛感想</category>
      </categories>
      <tags>
        <tag>参赛感想</tag>
        <tag>NOIP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[公告]]></title>
    <url>%2F%E5%85%AC%E5%91%8A%2F</url>
    <content type="text"><![CDATA[这里会放一些公告使用电脑打开网页以获得更佳的阅读体验！网址：https://henrytbtrue.github.io/ 注意是https！ 进入文章下方有评论区！欢迎大家评论！如图： 10.5upd因为泥萌的henrytb发烧了，可能暂停更新几天]]></content>
  </entry>
  <entry>
    <title><![CDATA[计蒜客 数论与基础数学 gcd]]></title>
    <url>%2F%E8%AE%A1%E8%92%9C%E5%AE%A2-%E6%95%B0%E8%AE%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E6%95%B0%E5%AD%A6-gcd%2F</url>
    <content type="text"><![CDATA[$$\text{ gcd与lcm }$$ 定义 设$a$和$b$为两个不为$0$的整数，如果$d | a$且$d | b$，则称$d$为$a,b$的公约数。而$a,b$中公约数中最大的被称为$a,b$的最大公约数，记作$gcd(a,b)$。 设$a$和$b$为两个不为$0$的整数，如果$a | d$且$b | d$，则称$d$为$a,b$的公倍数。而$a,b$中公倍数中最小的被称为$a,b$的最小公倍数，记作$lcm(a,b)$。 性质 若$a | m$，$b | m$，则$gcd(a,b) | m$。 若$d | a$，$d | b$，则$d | lcm(a,b)$。 $lcm(a,b)=\frac{ab}{gcd(a,b)}$。 设$m,a,b$是正整数，则$lcm(ma,mb)=m\times lcm(a,b)$ 若$m$是非零整数$a_1,a_2,a_3…a_n$的公倍数，则$lcm(a_1,a_2,a_3…a_n)|m$ 辗转相除法求$gcd$这个算法用来快速计算$2$个整数的最大公约数。 $\gcd(a,b)=\gcd(b,a\mod b)$。 Code: 1234int gcd(int a,int b)&#123; if(b==0)return a; else return gcd(b,a%b);&#125; emmm…完结]]></content>
      <categories>
        <category>OI笔记</category>
        <category>计蒜客</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计蒜客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI 10.4 栈与队列]]></title>
    <url>%2FZROI-10-4-%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[$$\text{ 栈与队列 }$$ 栈先进后出，支持$push$和$pop$两种操作。1234//手写栈，s[0]为栈内元素个数。int s[N];s[++s[0]]=a; //入栈s[0]--; //出栈 STL大法吼！ 1234567//STL的栈stack&lt;int&gt; s;s.push(a); //pushs.top(); //取栈顶元素s.pop(); //pops.empty(); //判空s.size(); //栈大小 出栈序列 $1\sim n$的排列，共有$\frac{C^n_{2n}}{n+1}$或$(C^n_{2n}-C^{n-1}_{2n})$种合法的出栈序列（卡特兰数）。 一个栈的入栈序列为$1,2,3…n$，已知第二个出栈的元素是$n$，求最后有多少种合法的出栈序列。 $n-1$种！ 单调栈 元素单调 用法：一个长度为$n$的序列$a$，你需要对于每个元素找到它左边第一个比它大的元素的位置。 暴力$O(n^2)$，乱搞$O(nlogn)$。 维护一个单调递减的单调栈即可。时间复杂度$O(n)$。 $$\text{ Largest Rectangle in Histogram }$$ 有$n$个宽度为$1$的长度为$a_i$的矩形放在地上，你需要计算最大子矩形面积。 $n\leq 10^6$ 单调栈找出每一个元素往左第一个比它小的和往右第一个比它小的。 再$for$一遍找答案。 $$\text{ Maximal Rectangle }$$ 给出一个$n\times m$的01矩阵，计算全$1$最大子矩形面积。 $n,m\leq 5000$ 枚举全$1$最大子矩形下边界，然后就转化成了上一题。 设$f_{i,j}$表示$(i,j)$往上有多少个$1$。 $$f_{i,j}=\left\{\begin{aligned}0\qquad a_{i,j}=0 \\f_{i-1,j}+1 \qquad a_{i,j}=1\end{aligned}\right.$$ 1234560 1 1 0 1 0 11 1 1 0 1 0 01 1 1 1 1 1 1------------- 下边界0 0 1 1 1 0 11 1 0 1 0 1 0 求 1230 1 1 0 1 0 11 1 1 0 1 0 01 1 1 1 1 1 1 中的最大全$1$子矩形即可。 就是上一题。 我写代码常数太大，卡不过去，怎么办？ 凉拌 $$\text{ 小例题 }$$ 一个长度为$n$的序列$a$，你需要计算$$\sum^n_{l=1}\sum^n_{r=l}(\max^r_{k=l}A_i-\min^r_{k=l}A_i)$$ $n\leq 10^6$。 枚举区间最大值的位置。 队列 先进先出 STL大法吼！ 1234567queue&lt;int&gt; q;q.empty(); //判空q.push(); //pushq.size(); //大小q.front(); //队头q.back(); //队尾q.pop(); //pop 单调队列 队列中的元素单调 应用：一个长度为$n$的序列，输出其中每$m$个连续子段的最大元素。 12345678int he,ta=1;q[1]=1;for(int i=2;i&lt;=n;i++)&#123; for(;he&lt;=ta&amp;&amp;q[he]&lt;=i-m;)he++; for(;he&lt;=ta&amp;&amp;a[q[ta]]&lt;=a[i];)--ta; q[++ta]=i; if(i&gt;=m)ans=max(ans,max(a[q[he]],a[i]));&#125; 应用：一个长度为$n$的序列，输出其中长度不超过$m$的最大连续子段和。 前缀和 $$b_i=\sum^i_{j=1}a_i$$ 这就是求固定$r$，在$r-m+1\sim r$之间找最小。 完结撒花✿✿ヽ(°▽°)ノ✿！]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI 10.3 二分]]></title>
    <url>%2FZROI-10-3-%E4%BA%8C%E5%88%86%2F</url>
    <content type="text"><![CDATA[$$\text{ 二分答案 }$$ 二分答案思想定义一个$check()$函数，返回$true$即答案可以$\geq mid$，否则答案$\leq mid$。 Problem: $A1$ 一个长度为$n$的序列$a$，你有$m$次操作的机会，每次操作是将其中连续的$w$个元素增加$1$。 最大化最终序列的最小值。 $1\leq w\leq n\leq 10^5,1\leq m\leq 10^5$ 二分答案最终序列的最小值。 二分将问题转化成：$\leq m$次操作，每次操作可以将其中连续的$w$个元素增加$1$，使得序列中的所有数都$\geq x$。 贪心策略：当一个数$&lt; x$时，以这个数为左端点进行操作直到这个数$= x$。 依然不能通过qwq 正解：维护一个差分序列！ Problem: $A2$ 一共有$n$面墙，初始有$a_i$个弓箭手在第$i$面墙上，一个在$i$位置的弓箭手可以保护$|i-j|\leq r$的所有墙$j$。 你现在可以增派$k$个弓箭手并且任意分配它们的位置。你需要最大化被数量最少的弓箭手保护的墙被弓箭手保护的数量。 $n\leq 5\times 10^5,0\leq r\leq n,0\leq k\leq 10^{18},0\leq a_i\leq 10^9$。 这个问题完全可以转化为上一个问题的qwq~ 将一个弓箭手看作一个区间即可。 Problem: $A3$ 给出一棵$n$个节点的树，你需要用一些路径去覆盖这棵树上所有的边，每条边都需要被恰好一条路径覆盖。 你需要计算出最少的路径条数和在路径条数最少的情况下最长的路径最短可以是多少。 第一问：设奇度点个数为$cnt$，则答案为$\frac{cnt}{2}$。 证明略。 第二问：二分最长的路径。 Problem: $B1$ 给出一个长度为$n$的序列$a$，可以修改不超过$k$个元素的值，你需要最小化$\max |a_i-a_{i+1}|$。 $n\leq 2000,-10^9\leq a_i\leq 10^9$。 二分答案后问题变成：最小化修改次数。 从不修改次数的角度来看：最大化不修改的数的个数。 设$f_i$表示$a_i$不改的情况下$1\sim i$最多可以有多少个不用修改。 则$f_i+1\rightarrow f_i(mid\times (i-j)\leq |a_i-a_j|)$ 想要提出意见？请戳下方评论区↓！ QAQ~]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI 10.2 动态规划]]></title>
    <url>%2FZROI-10-2-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[$$\text{ 动态规划1 }$$ 引入给出一个$n$个元素的序列$a$，找出其中出现了超过一半次数的个数，$n$为奇数。 Task #1：$1\leq n\leq 10^5$，$128$MB Task #2：$1\leq n\leq 10^7$，$128$MB Task #3：$1\leq n\leq 10^7$，$4$MB 例题部分排队买票 有$n$个人排队买票，窗口一次可以卖出一张票或相邻两个排队的人的两张票。 给出每个人单独买票的时间$s_i$，和第$i$个人与第$i-1$个人的两张票一起买的时间$d_i$，求最小时间。 设$f_i$为前$i$个人的最小代价。 转移方程：$f_i=\min\{f_{i-1}+s_i,f_{i-2}+d_i\}$ Monkey and Banana 有$n$种长方体，每个长方体三维的长度用一个三元组$(x_i,y_i,z_i)$表示，长方体可以随意翻动，每种长方体都有无限个。 叠长方体的规则是：放在上面的长方体的长、宽严格小于放在下面的。求最高能放多少。 先把一种长方体固定长宽高变成6种。然后给每种长方体按长和宽排序。求$LIS$即可。 免费馅饼 一根0~10的数轴，一开始你站在$5$的位置。 天上开始掉一些馅饼，一共$n$个，你只有在馅饼落到地面时才可以接到这个馅饼。每个时刻你的移动速度为$1$，求你最多接到多少个馅饼。 DP啦~ $f_{i,j}$表示第$i$个时刻在第$j$个位置能得到的最多的馅饼。 转移方程：$f_{i,j}=\max\{f_{i-1,j-1},f_{i-1,j+1},f_{i-1,j}\}+cnt_{i,j}$，其中$cnt_{i,j}$表示第$i$个时刻，第$j$个位置掉下来的馅饼数。 如何初始化？ 初始化：$f_{0,i}=-inf$，其中$i=$ $0$~$4$，$6$~$10$。 LCS问题（最长公共子序列）给定两个字符串$a,b$，求它们的LCS长度。 $f_{i,j}$表示$a$的前$i$项与$b$的前$j$项的LCS长度。 转移方程： $$f_{i,j}=\left\{\begin{aligned}a_i=b_j\qquad\qquad\quad\; f_{i-1,j-1}+1\\a_i\neq b_j\quad\quad \max\{f_{i-1,j},f_{i,j-1}\}\end{aligned}\right.$$ Treats for the Cows 有一个$n$个元素的数组$a$，每次可以从最左边或最右边取一个元素。 如果一个元素是第$x$天取出来的，它产生的贡献为这个元素的值$\times x$。最大化总贡献。 用$f_{i,j}$表示总共取了$i$个，从左边取了$j$个的最大贡献。 则$f_{i,j}=\max\{f_{i-1,j-1}+i\times a_j,f_{i-1,j}+i\times a_{n-i+j+1}\}$ 初始化？ 不需要初始化。 最后答案？ $\max\{f_{n,0\sim n}\}$。 免费馅饼升级版一个$n\times n$的棋盘，有若干个馅饼，第$i$个馅饼会在$t_i$时刻掉落在$(r_i,c_i)$上。你$0$时刻可以选择从任意格子出发，每个时刻可以向四个方向移动一格，也可以不动。最大化捡到的馅饼个数。 先对输入的馅饼序列按照$t_i$排序。 用$f_i$表示上一个接到的是第$i$个馅饼。 转移方程：若$t_j-t_i\leq |r_i-r_j|+|c_i-c_j|$，$f_j=f_i+1$。 完结撒花✿✿ヽ(°▽°)ノ✿！qwq~]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI 10.2 高精度]]></title>
    <url>%2FZROI-10-2-%E9%AB%98%E7%B2%BE%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[$$\text{ 高精度 }$$ 高精度数的表示方法 使用一个一位数组来储存一个数，每个元素储存原数的某一位或某连续几位。 一个方便的操作是把数的长度存在数组下标为0的位置上。 应用 读入一个长度为$n$的数，把它倒序存在一个数组里。 1234scanf("%s",s+1);for(int i=1;i&lt;=strlen(s+1);i++)&#123; a[i]=s[strlen(s+1)-i+1]-'0';&#125; 再写出压四位的写法 123456789101112131415//输出压四位int o[4];bool con=true;for(int i=a[0];i&gt;=1;i--)&#123; for(int j=0;j&lt;4;j++)&#123; o[j]=a[i]%10;a[i]/=10; &#125; for(int j=3;j&gt;=0;j--)&#123; if(con==true)&#123; if(o[j]==0) continue; else con=false; &#125; printf("%d",o[j]); &#125;&#125; 比较大小123456789if(lena&gt;lenb)return 1;else if(lenb&gt;lena)return -1;else&#123; for(int i=1;i&lt;=lena;i++)&#123; if(a[i]&gt;b[i])return 1; else if(a[i]&lt;b[i])return -1; &#125; return 0;&#125; 高精度+int先在最低位加上int，然后一步一步进位。 123456a[1]+=b;for(int i=1;i&lt;=lena;i++)&#123; a[i+1]+=a[i]/A; a[i]%=A; if(a[lena+1])++lena;&#125; 高精度+高精度1234567lena=max(lena,lenb);for(int i=1;i&lt;=lena;i++)&#123; a[i]+=b[i]; a[i+1]+=a[i]/A; a[i]%=A; if(a[lena+1])lena++;&#125; 高精度-高精度$$ \text{a是否为负}\left\{\begin{aligned}\text{是}\left\{ \begin{aligned} \text{正-负}\\ \text{负-负} \end{aligned} \right.\\\text{否}\left\{ \begin{aligned} \text{正-正}\\ \text{负-正} \end{aligned} \right.\\\end{aligned}\right.$$ $\LaTeX$真是毒瘤 高精度乘法高精度$\times$int a$\times$b 处理进位 1234567for(int i=1;i&lt;=lena;i++)&#123; a[i]*=b; a[i+1]+=a[i]/A; a[i]%=A; if(a[lena+1])lena++;&#125;// a和b开long long! 高精度$\times$高精度 不压位 建立一个临时数组$c$！ 12345678910int c[];lenc=lena+lenb-1;for(int i=1;i&lt;=lena;i++)&#123; for(int j=1;j&lt;=lenb;j++)&#123; c[i+j-1]+=a[i]*b[j]; c[i+j]+=c[i+j-1]/10; c[i+j-1]%=10; &#125;&#125;if(c[lenc+1])lenc++; 高精度除法高精度$\div$int像竖式一样挨个除。 毒瘤的$\LaTeX$打不出来竖式 123456int a[],b,r=0;for(int i=lena;i&gt;0;--i)&#123; r=r*10+a[i]; a[i]=r/b; r%=b;&#125; 压位？ 123456int a[],b,r=0;for(int i=lena;i&gt;0;--i)&#123; r=r*A+a[i]; a[i]=r/b; r%=b;&#125; 习题部分NOIp2003 麦森数原题 读入$P (1000&lt;P&lt;3100000)$，计算$2^P-1$在十进制下的位数和后500位数字。 第一问： $X$在十进制中的位数是$[log_{10}X]+1$ 所以，$2^P-1$在十进制中的位数就是$P$！ 第二问： 使用快速幂 求$a^b$的程序： 12345678int ans=1,w=a;for(;b;b/=2)&#123; if(b%2)&#123; ans*=w; &#125; w*=w;&#125;//ans --&gt; 答案 高精求$2^P-1$：$ans\times w$ 高精度乘法 NOIp2012 国王游戏恰逢$H$国国庆，国王邀请$n$位大臣来玩一个有奖游戏。首先，他让每个大臣在左、右手上面分别写下一个整数，国王自己也在左、右手上各写一个整数。然后，让这$n$位大臣排成一排，国王站在队伍的最前面。排好队后，所有的大臣都会获得国王奖赏的若干金币，每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。 国王不希望某一个大臣获得特别多的奖赏，所以他想请你帮他重新安排一下队伍的顺序，使得获得奖赏最多的大臣，所获奖赏尽可能的少。注意，国王的位置始终在队伍的最前面。 贪心策略： person left right king $a_0$ $b_0$ $P_1$ $a_1$ $b_1$ $P_2$ $a_2$ $b_2$ 使$a_1\times b_1 &lt; a_2 \times b_2$。 就是排在前面的左手和右手的乘积小。]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Set详解]]></title>
    <url>%2FSet%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[$$\text{ Set 详解 }$$所谓set，就是STL里的集合。可以快速地插入和查找某个元素。 声明setset&lt;type&gt; name; 1234567set&lt;int&gt; s1;set&lt;char&gt; s2;//---------------------------struct qwq&#123; ...;&#125;;set&lt;qwq&gt; s3; 应用set插入使用insert()函数来插入set。 1234set&lt;int&gt; s;s.insert(1);s.insert(2);... 查找使用count()函数查找这个变量的值是不是在set里。 是返回true，否则返回false。 1234set&lt;int&gt; s;s.insert(1);if(s.count(1))printf("hehe");else printf("wawa"); 判空empty()函数可以返回该set是否为空的信息。 是返回true，否则返回false。 123set&lt;int&gt; s;s.insert(1);s.empty(); //返回0 删除erase()函数可以删除set中的一个元素。 12345set&lt;int&gt; s;s.insert(1);s.empty(); //返回0s.erase(1);s.empty(); //返回1 遍历使用迭代器！ 1234567891011121314151617set&lt;int&gt; s;s.insert(1);s.insert(3);s.insert(4);s.insert(2);for(set&lt;int&gt;::iterator it=s.begin();it!=s.end();it++)&#123; cout&lt;&lt;*it&lt;&lt;endl;&#125;//由于set会自动给元素排序//输出:/*1234*/ 完结撒花✿✿ヽ(°▽°)ノ✿！QAQ~]]></content>
      <categories>
        <category>算法详解</category>
      </categories>
      <tags>
        <tag>算法详解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[题解 Luogu P3472 MAF-Mafia]]></title>
    <url>%2F%E9%A2%98%E8%A7%A3-Luogu-P3472-MAF-Mafia%2F</url>
    <content type="text"><![CDATA[$$\text{ Luogu P3472 MAF-Mafia }$$原题 题目描述：给定n个神枪手，每个神枪手瞄准一个人，以一定顺序开枪，问最少和最多死多少人 Solution: 最少的情况是每个联通块只有入度为零的点活下来（如果是环就留一个人）；最多的情况就是从入度为零的开始到结束。 注意自环！ AC Code:吴老师那玄学的码风 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;queue&gt;using namespace std;int const N=2000001;int n,used[N],p[N],s[N],ind[N],size[N];int head,tail,q[N],d[N];bool f[N];int dfs(int x,int y)&#123; used[x]=y; if (used[p[x]]==0) dfs(p[x],y); used[x]=used[p[x]];&#125;int main()&#123; freopen("mafia.in","r",stdin); freopen("mafia.out","w",stdout); scanf("%d\n",&amp;n); for (int i=1;i&lt;=n;i++) &#123; scanf("%d",&amp;p[i]); ind[p[i]]++; &#125; int T=0; for (int i=1;i&lt;=n;i++) if (used[i]==0) dfs(i,++T); for (int i=1;i&lt;=T;i++) s[i]=-1; for (int i=1;i&lt;=n;i++) s[used[i]]=0; for (int i=1;i&lt;=n;i++) if (ind[i]==0) s[used[i]]++; int Mans=0,mans=0; for (int i=1;i&lt;=n;i++) size[used[i]]++; for (int i=1;i&lt;=T;i++) if ((s[i]==0) &amp;&amp; (size[i]&gt;1)) Mans++; else if (s[i]&gt;0) Mans+=s[i]; for (int i=1;i&lt;=T;i++) s[i]=0; for (int i=1;i&lt;=n;i++) s[used[i]]++; head=1; tail=0; for (int i=1;i&lt;=n;i++) if (ind[i]==0) &#123; q[++tail]=i; f[i]=true; &#125; while (head&lt;=tail) &#123; int x=q[head]; s[used[x]]--; if (d[x]==1) &#123; mans++; &#125; if (d[x]==0)&#123; d[p[x]]=1; &#125; ind[p[x]]--; if ((ind[p[x]]==0) &amp;&amp; (!f[p[x]])) &#123; q[++tail]=p[x]; f[p[x]]=true; &#125; head++; &#125; for (int i=1;i&lt;=n;i++) if ((!f[i]) &amp;&amp; (d[i]==1)) &#123; q[++tail]=i; f[i]=true; &#125; while (head&lt;=tail) &#123; int x=q[head]; s[used[x]]--; if (d[x]==1) &#123; mans++; &#125; if (d[x]==0)&#123; d[p[x]]=1; &#125; ind[p[x]]--; if ((ind[p[x]]==0) &amp;&amp; (!f[p[x]])) &#123; q[++tail]=p[x]; f[p[x]]=true; &#125; head++; &#125; for (int i=1;i&lt;=T;i++) &#123; mans+=(1+s[i])/2; &#125; printf("%d %d\n",mans,n-Mans); return 0; &#125; 完结撒花✿✿ヽ(°▽°)ノ✿！]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI-9.23-搜索]]></title>
    <url>%2FZROI-9-23-%E6%90%9C%E7%B4%A2%2F</url>
    <content type="text"><![CDATA[$$\text{ 搜索 }$$ $$\text{ 引入——递归 }$$这是一个递归求幂的程序 123int f(int x,int y)&#123; return f(x,y-1)*x;&#125; 没有边界条件！ $$\text{ Luogu P1706 全排列问题 }$$原题 输出自然数1到n所有不重复的排列，即n的全排列，要求所产生的任一数字序列中不允许出现重复的数字。 数据范围：$1\leq n\leq 9$ STL大法吼！1next_permutation(a,a+n);//求下一个排列 正解正解当然是搜索啦qwq AC Code: 12345678910111213141516171819202122232425#include &lt;bits/stdc++.h&gt;using namespace std;int n,a[11];bool book[11];void dfs(int x)&#123; if(x&gt;n)&#123; for(int i=1;i&lt;=n;i++)cout&lt;&lt;" "&lt;&lt;a[i]; cout&lt;&lt;endl; &#125; else&#123; for(int i=1;i&lt;=n;i++)&#123; if(!book[i])&#123; a[x]=i; book[i]=true; dfs(x+1); book[i]=false; &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n; dfs(1); return 0;&#125; $$\text{ Luogu P2404 自然数的拆分问题 }$$原题 任何一个大于1的自然数n，总可以拆分成若干个小于n的自然数之和。 歪解：打表qwq感谢@minecraft_herobrine的代码 1234567891011121314151617181920212223#include&lt;bits/stdc++.h&gt; using namespace std;int main()&#123; int n; scanf("%d",&amp;n); if(n==2) printf("1+1"); if(n==3) printf("1+1+1\n1+2"); if(n==4) printf("1+1+1+1\n1+1+2\n1+3\n2+2"); if(n==5) printf("1+1+1+1+1\n1+1+1+2\n1+1+3\n1+2+2\n1+4\n2+3"); if(n==6)printf("1+1+1+1+1+1\n1+1+1+1+2\n1+1+1+3\n1+1+2+2\n1+1+4\n1+2+3\n1+5\n2+2+2\n2+4\n3+3"); if(n==7)&#123; printf("1+1+1+1+1+1+1\n1+1+1+1+1+2\n1+1+1+1+3\n1+1+1+2+2\n1+1+1+4\n"); printf("1+1+2+3\n1+1+5\n1+2+2+2\n1+2+4\n1+3+3\n1+6\n2+2+3\n2+5\n3+4"); &#125; if(n==8)&#123; printf("1+1+1+1+1+1+1+1\n1+1+1+1+1+1+2\n1+1+1+1+1+3\n"); printf("1+1+1+1+2+2\n1+1+1+1+4\n1+1+1+2+3\n1+1+1+5\n"); printf("1+1+2+2+2\n1+1+2+4\n1+1+3+3\n1+1+6\n1+2+2+3\n1+2+5\n1+3+4\n1+7\n"); printf("2+2+2+2\n2+2+4\n2+3+3\n2+6\n3+5\n4+4"); &#125; return 0;&#125; 正解仍然是搜索不然这节课讲什么？ AC Code: 123456789101112131415161718#include &lt;bits/stdc++.h&gt;using namespace std;#define n 15#define For(i,a,b) for(int i=a;i&lt;=b;i++)int N,A[n];void dfs(int d,int last,int sum)&#123; if(sum==0)&#123; if(d==2)return; For(i,1,d-1)printf("%d%c",A[i],"+\n"[i==d-1]); return; &#125; For(i,last,sum)A[d]=i,dfs(d+1,i,sum-i);&#125;int main()&#123; scanf("%d",&amp;N); dfs(1,1,N); return 0;&#125; 强势压行qwq $$\text{ Luogu P1219 八皇后 }$$原题 检查一个如下的6 x 6的跳棋棋盘，有六个棋子被放置在棋盘上，使得每行、每列有且只有一个，每条对角线(包括两条主对角线的所有平行线)上至多有一个棋子。 正解还是搜索我这样下去是不是要烦死你 AC Code: 123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;using namespace std;#define For(i,a,b) for(int i=a;i&lt;=b;i++)#define Rep(i,a,b) for(int i=a;i&gt;=b;i--)#define n 105int N,M,A[n],B[n],C[n],D[n];void DFS(int d)&#123; if(d&gt;N)&#123; M++; if(M&lt;=3)&#123; For(i,1,N)printf("%d ",A[i]); puts(""); &#125; return; &#125; For(i,1,N) if(!B[i]&amp;&amp;!C[i+d]&amp;&amp;!D[i-d+N])&#123; A[d]=i; B[i]=1; C[i+d]=1; D[i-d+N]=1; DFS(d+1); B[i]=0; C[i+d]=0; D[i-d+N]=0; &#125;&#125;int main()&#123; scanf("%d",&amp;N); DFS(1); printf("%d\n",M); return 0;&#125; 这次没压行qwq $$\text{ Luogu P1657 选书 }$$原题 你一共有$n$本书。有$n$个人参加培训，每个人有两本在编号为1~n之间的喜欢的书。求每个人都拿到自己喜欢的书的方案数。 So easy! 妈妈再也不用担心我的学习！ 正解又是搜索烦死你 AC Code: 12345678910111213141516171819#include &lt;bits/stdc++.h&gt;using namespace std;int n,ans,A[25],B[25],V[25];void dfs(int d)&#123; if(d&gt;n)&#123; ans++; return; &#125; if(!V[A[d]])V[A[d]]=1,dfs(d+1),V[A[d]]=0; if(!V[B[d]])V[B[d]]=1,dfs(d+1),V[B[d]]=0;&#125;int main()&#123; cin&gt;&gt;n; if(n==0)return puts("0"),0; for(int i=1;i&lt;=n;i++)cin&gt;&gt;A[i]&gt;&gt;B[i]; dfs(1); cout&lt;&lt;ans; return 0;&#125; $$\text{ CODE[VS] 1116 四色问题 }$$原题 给定N（小于等于8）个点的地图，以及地图上各点的相邻关系，请输出用4种颜色将地图涂色的所有方案数（要求相邻两点不能涂成相同的颜色） 搜索：我又来了哭QAQ AC Code: 123456789101112131415161718192021222324252627282930313233#include &lt;cstdlib&gt;#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;cmath&gt;using namespace std;int map[8][8] = &#123;&#125;, n, color[8] = &#123;&#125;;int search(int a) &#123; bool flag[4] = &#123;&#125;; int i, num = 0, ans = 0; for (i = 0; i &lt; a; i++) if (map[a][i]) flag[color[i]] = true; for (i = 0; i &lt;= 3; i++) if (!flag[i]) num++; if (a == n - 1) return num; else for (i = 0; i &lt;= 3; i++) if (!flag[i]) &#123; color[a] = i; ans += search(a + 1); &#125; return ans;&#125;int main() &#123; int i, j; cin &gt;&gt; n; for (i = 0; i &lt; n; i++) for (j = 0; j &lt; n; j++) cin &gt;&gt; map[i][j]; cout &lt;&lt; search(0) &lt;&lt; endl; return 0;&#125; $$\text{ 完结撒花✿✿ヽ(°▽°)ノ✿ }$$QAQ]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ZROI 9.9 排序]]></title>
    <url>%2FZROI-9-9-%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[$$ O(n^2)\text{ 排序算法 }$$ $$\text{ 选择排序 }$$每次找最大（或最小）的一个数，放到对应位置。 $$\text{ 插入排序 }$$for一遍，每次往前查，找到相应位置。 $$\text{ 冒泡排序 }$$n轮，每次比较相邻元素。 123for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if(a[i]&gt;=a[j])swap(a[i],a[j]); 思考：逆序对 $$ O(nlogn)\text{ 排序算法 }$$ $$\text{ 快速排序 }$$ 每次随机选择一个数作为分界点 大的放右边小的放左边 递归对两边分治 1234567891011121314void work(int L,int R)&#123; if (L&gt;=R) return; int i=L,j=R,tmp=A[(L+R)/2]; while (i&lt;=j)&#123; while (i&lt;=j&amp;&amp;A[i]&lt;tmp) i++; while (i&lt;=j&amp;&amp;A[j]&gt;tmp) j--; if (i&lt;=j)&#123; swap(A[i],A[j]); i++,j--; &#125; &#125; if (i&lt;R) work(i,R); if (L&lt;j) work(L,j);&#125; 如知道随机种子或每次选中间数，如何卡至$O(n^2)$？ 使中间数为最小值。 STL大法吼！12345678910111213sort(a,a+n); //a[0..n-1]sort(a.begin(),a.end()); //vectorsort(a.rbegin(),a.rend()); //sort+reverse (vector)//------------------------------------------------bool cmp(aaa a,aaa b)&#123; return a.aa&lt;b.aa;&#125;sort(a,a+n,cmp);//------------------------------------------------bool operator &lt; (aaa a,aaa b)&#123; return a.aa&lt;b.aa;&#125;sort(a,a+n); STL比较函数当两个数相等的时候一定要返回0！！！ Reverse Sort: 给你一个序列，每次操作能翻转一个区间，代价为这个区间的长度 在$O(nlogn)$的总代价内将整个序列排序 $$\text{ 归并排序 }$$ 从中间断开为左右区间 递归对两边分治 对已经有序的两边区间进行归并 123456789101112void work(int L,int R)&#123; if (L==R) return; work(L,Mid); work(Mid+1,R); int tl=L,tr=Mid+1,t=L; while (tl&lt;=Mid&amp;&amp;tr&lt;=R)&#123; if (A[tl]&lt;A[tr]) B[t++]=A[tl++];else B[t++]=A[tr++]; &#125; while (tl&lt;=Mid) B[t++]=A[tl++]; while (tr&lt;=R) B[t++]=A[tr++]; for (int i=L;i&lt;=R;i++) A[i]=B[i];&#125; STL大法吼！区间合并：inplace_merge 12//a[0..n-1],a[n..n*2-1]合并inplace_merge(a,a+n,a+n*2); 扩展：归并排序求逆序对 $$\text{ 不基于比较的排序算法 }$$ $$\text{ 桶排序 }$$一个萝卜一个坑 时间复杂度$O(n+m)$ $$\text{ 基数排序 }$$ 分段分别桶排，从低位到高位依次作为关键字 比如设当前所有数已经按后𝑘位排好了序，那么后𝑘+1位的排序就是按第𝑘+1位排，相同的就按原顺序排 视段长的大小，开这么多的桶，求出比𝑥小的数有多少个，然后快速把每个数放到该放的位置去。 [WC2017] 挑战]]></content>
      <categories>
        <category>OI笔记</category>
        <category>ZROI</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ZROI</tag>
      </tags>
  </entry>
</search>
